using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Json;
using System.Security.Cryptography;
using System.Text;
using testThreadAlongMainWebTread.Util;

namespace Helper.UIHelper
{
    public class CaptchaKeySpec
    {
        public static Models.CapthcaKeySpec KeySpec { get; set; }
        private static RSACryptoServiceProvider Signer { get; set; }
        private static RSACryptoServiceProvider Verifier { get; set; }
        static CaptchaKeySpec()
        {

            if (KeySpec != null) return;

            KeySpec = new Models.CapthcaKeySpec
            {
                PrivateKey
                PublicKey = "D928A3B51A3E9E4FC107FD6C26BDA9F5A9FA1D581EBB28E9F063323264B29B7DCC1CEFF2D39E747CB78A907A6808C61DB0E399039FD66CB5F08F14811FF9E394232338D0225ACE4E7E498928ED2813ADBA53F8203BA369D083CF8EA4327B999143F7FD00C1CCFCF6A216B642D0592B119A847439788D5EEEFD594296A66ECCC0F321DCBF7FB8BD68D7D3F59C2F4B8783A34D05025A66A54280168FD0A825784AA43CE928994668F83C5AE69E06B49A1A0C7DAF9B6E55DCC0AE25BEDE6BECED5C179035AF161CF528EAA98EFAD4D4574C91F3E3E87E62153142822029108C0415447C141B4FD4CDBCADE52E12114B8766F5A684685F35229B62A51052C5992461CFC8BB14D77D1E5728367C12F9AFF32A"
            };

            var configFile = $"{AppDomain.CurrentDomain.BaseDirectory}/config/captchaKeySpec.cfg";
            if (!Directory.Exists(path: $"{AppDomain.CurrentDomain.BaseDirectory}/config/"))
                Directory.CreateDirectory(path: $"{AppDomain.CurrentDomain.BaseDirectory}/config/");


            byte[] buffer;
            if (!File.Exists(configFile))
            {
                using (var stream = new FileStream(configFile, FileMode.Create, FileAccess.Write, FileShare.Read))
                {
                    buffer = KeySpec.ToJson();
                    stream.Write(buffer, offset: 0, count: buffer.Length);
                }
            }
            else
            {
                buffer = File.ReadAllBytes(configFile);
                KeySpec = buffer.FromJson<Models.CapthcaKeySpec>();
            }

            KeySpec.PrivateKey = KeySpec.PrivateKey.DcrCBCPKCS5FromHexString();
            KeySpec.PublicKey = KeySpec.PublicKey.DcrCBCPKCS5FromHexString();

            Signer = new RSACryptoServiceProvider();
            Signer.ImportPrivateKey(KeySpec.PrivateKey);
            Verifier = new RSACryptoServiceProvider();
            Verifier.ImportPublicKey(KeySpec.PublicKey);
        }

        public static string SignCaptcha(string token, string captchaCode)
            => Signer.SignData($"{token}{captchaCode.PadLeft(6, '0')}".HexStringToByteArray(), new SHA256CryptoServiceProvider()).ByteArrayToHexString();
        public static bool VerifyCaptchaSign(string token, string captchaCode, string SignedData)
            => Verifier.VerifyData($"{token}{captchaCode.PadLeft(6, '0')}".HexStringToByteArray(), new SHA256CryptoServiceProvider(), SignedData.HexStringToByteArray());
    }
}
